name: Jira Integration

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  updateJiraComponents:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
      
      - name: Get Jira Issue
        id: get_jira_issue
        run: |
          # Retrieve Jira issue key from pull request title
          issueKey=$(echo "${{ github.event.pull_request.title }}" | grep -Eo '[A-Z]+-[0-9]+')
          
          # Fetch Jira issue details using Jira API
          jiraData=$(curl -u ${{ secrets.JIRA_USERNAME }}:${{ secrets.JIRA_API_TOKEN }} -X GET -H "Content-Type: application/json" https://cloudpacific.atlassian.net/rest/api/latest/issue/${issueKey})
          
            
      
    
      - name: Update Jira Components
        uses: jitterbit/get-changed-files@v1
      - run: |
          # Loop through each modified or added file
         

          for fileName in ${{  steps.files.outputs.added_modified }}; do
            # You can use $fileName here to reference each file name without extension
            echo "File name without extension: $fileName"
           
            # Extract the component name from the file (you might need to adjust this)
            component=$(echo "$fileName" | grep -o 'component: \K.*')
            
            # Check if the component exists in the Jira project
            if curl -u ${{ secrets.JIRA_USERNAME }}:${{ secrets.JIRA_API_TOKEN }} -X GET -H "Content-Type: application/json" "https://cloudpacific.atlassian.net/rest/api/latest/project/NB/component/$component" | grep -q '"name":"'"$component"'"'; then
              echo "Component $component already exists in the Jira project."
            else
              # Create the component in the Jira project using
